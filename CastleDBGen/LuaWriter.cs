using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CastleDBGen
{
    internal class LuaWriter : BaseDBWriter
    {
        static readonly string LuaClassStart = "{0} = {{ }}"; // class SHEETNAME
        static readonly string LuaClassEnd = "};\n";
        static readonly string LuaProperty = "{0} {1};\n"; // Type name;\n

        public override void WriteClassDefinitions(CastleDB database, string fileBase, string sourceFileName, Dictionary<string, string> switches, List<string> errors)
        {
            int tabDepth = 0;
            string fileText = string.Format("-- AUTOGENERATED LUA SOURCE CODE FROM {0}\r\n", sourceFileName);

            foreach (CastleSheet sheet in database.Sheets)
            {
                string sheetName = sheet.Name.Replace("@","_");
                fileText += string.Format("\r\nfunction ResolveReferences{0}(self, database)\r\n", sheetName);

                foreach (CastleColumn col in sheet.Columns)
                {
                    if (col.TypeID == CastleType.Ref)
                        fileText += string.Format("{0}self.{1} = database:FindTable(\"{2}\", self.{1}Key, \"{3}\")\r\n", GetTabString(0), col.Name, col.Key, database.Sheets.FirstOrDefault(s => s.Name.Equals(col.Key)).IDColumn.Name);
                }

                fileText += string.Format("\r\nfunction Load{0}(self, jobject)\r\n", sheetName);

                foreach (CastleColumn col in sheet.Columns)
                {
                    switch (col.TypeID)
                    {
                    case CastleType.UniqueIdentifier:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetString()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.Boolean:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetBool()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.Color:
                        fileText += string.Format("{0}self.{1}.FromUInt(value[\"{1}\"]:GetUInt())\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.Enum:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetInt()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.File:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetString()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.Flags:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetUInt()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.Float:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetFloat()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.Integer:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetInt()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.List:
                        fileText += string.Format("{0}local {1}Array = value[\"{1}\"]\r\n", GetTabString(tabDepth + 0), col.Name);
                        fileText += string.Format("{0}for i = 0, {1}Array:Size() do\r\n", GetTabString(tabDepth + 0), col.Name);
                        fileText += string.Format("{0}local val = {{ }}\r\n", GetTabString(tabDepth + 1), string.Format("{0}_{1}", sheetName, col.Name));
                        fileText += string.Format("{0}Load{1}(val, {1}Array[i]);\r\n{0}{2}.Push(val)\r\n", GetTabString(tabDepth + 1), col.Name, col.Name);
                        break;
                    case CastleType.Ref:
                        fileText += string.Format("{0}self.{1}Key = value[\"{1}\"]:GetString()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    case CastleType.Text:
                        fileText += string.Format("{0}self.{1} = value[\"{1}\"]:GetString()\r\n", GetTabString(tabDepth + 0), col.Name);
                        break;
                    }
                }
                fileText += string.Format("{0}self.ResolveReferences = ResolveReference{1}\r\n", GetTabString(tabDepth + 0), sheetName);
                fileText += string.Format("{0}return\r\n", GetTabString(tabDepth + 0));
            }

            fileText +=
"\r\nfunction FindDatabaseTable(self, recordValue, tableName, recordName)\r\n" +
"    for k, v in ipairs(self) do\r\n" +
"        if k == tableName then\r\n" +
"            if v[tableName][recordName] == recordValue then\r\n" +
"                return v[tableName]\r\n" +
"            end\r\n" +
"        end\r\n";

            fileText += "\r\nfunction LoadDatabase(file)\r\n" +
"    local db = { }\r\n" +
"    -- load the data from file\r\n" +
"    for k = 0, file:GetRoot():Size() do\r\n" +
"        local sheet = file:GetRoot()[k]\r\n" +
"        local sheetName = sheet:Get(\"name\"):GetString()\r\n";

            foreach (CastleSheet sheet in database.Sheets)
            {
                string sheetName = sheet.Name.Replace("@", "_");
                fileText += string.Format("        if sheetName == \"{0}\" then\r\n", sheetName) +
                                          "            local linesElem = sheet:Get(\"lines\")\r\n" +
                                          "            for ln = 0, linesElem:Size() do\r\n" +
                                          "                local val = { }\r\n";
                fileText += string.Format("                Load{0}(linesElem[ln])\r\n", sheetName);
                fileText += string.Format("                table.append(db.{0}List, val)\r\n", sheetName);

                fileText +=               "        end\r\n";
            }

            fileText += "    for k,v in ipairs(db) do\r\n";
            fileText += "        for kk, vv in ipairs(v) do\r\n";
            fileText += "            vv:ResolveReferences()\r\n";

            System.IO.File.WriteAllText(fileBase, fileText);
        }
    }
}
