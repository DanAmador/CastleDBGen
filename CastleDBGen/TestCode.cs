// AUTOGENERATED C# SOURCE CODE FROM C:\new.cdb

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;

namespace MyNamespace {

public enum E_TESTENUM {
    VALUE,
    OTHER,
    THIRDENUM,
}

public class Test {
    public String Name { get; set; }
    public List<Test_Testl> Testl = new List<Test_Testl>();
    public String Tests { get; set; }
    public Test TestRef = null;
    private String TestRefKey;
    //public Color TestC { get; set; }

    public void Load(JObject value) {
        Name = value.Property("Name").Value.ToString();
        JArray TestlArray = value.Property("Testl").Value as JArray;
        for (int i = 0; i < TestlArray.Count; ++i) {
            Test_Testl val = new Test_Testl();
            val.Load(TestlArray[i] as JObject);
            Testl.Add(val);
        } 
        Tests = value.Property("Test").Value.ToString();
        TestRefKey = value.Property("TestRef").Value.ToString();
        //TestC.FromUInt(uint.Parse(value.Property("TestC").Value.ToString());
    }

    public void ResolveReferences(MyDB db) {
        for (int i = 0; i < db.TestList.Count; ++i) {
            if (db.TestList[i].Tests.Equals(TestRefKey)) {
                TestRef = db.TestList[i];
                break;
            }
        }
    }
}

public class Test_Testl {
    public String neww { get; set; }
    public bool sub { get; set; }

    public void Load(JObject value) {
        neww = value.Property("new").Value.ToString();
        sub = value.Property("sub").Value.ToString().Equals("true");
    }

    public void ResolveReferences(MyDB db) {
    }
}

public class SecondSheet {
    public String ID { get; set; }
    public uint FlagTest { get; set; }
    public E_TESTENUM TestEnum { get; set; }
    public int Value { get; set; }
    public String Text { get; set; }
    public SecondSheet NewRefTest = null;
    private String NewRefTestKey;

    public void Load(JObject value) {
        ID = value.Property("ID").Value.ToString();
        FlagTest = uint.Parse(value.Property("FlagTest").Value.ToString());
        TestEnum = (E_TESTENUM)int.Parse(value.Property("TestEnum").Value.ToString());
        Value = int.Parse(value.Property("Value").Value.ToString());
        Text = value.Property("Text").Value.ToString();
        NewRefTestKey = value.Property("NewRefTest").Value.ToString();
    }

    public void ResolveReferences(MyDB db) {
        for (int i = 0; i < db.SecondSheetList.Count; ++i) {
            if (db.SecondSheetList[i].ID.Equals(NewRefTestKey)) {
                NewRefTest = db.SecondSheetList[i];
                break;
            }
        }
    }
}

public class MyDB {
    public List<Test> TestList = new List<Test>();
    public List<SecondSheet> SecondSheetList = new List<SecondSheet>();

    public void Load(JObject file) {
        JArray sheetsElem = file.Property("sheets").Value as JArray;
        for (int i = 0; i < sheetsElem.Count; ++i) {
            JObject sheet = sheetsElem[i] as JObject;
            String sheetName = sheet.Property("name").Value.ToString();
            if (sheetName.Equals("Test")) {
                JArray linesElem = sheet.Property("lines").Value as JArray;
                for (int j = 0; j < linesElem.Count; ++j) {
                    Test val = new Test();
                    val.Load(linesElem[j] as JObject);
                    TestList.Add(val);
                }
            }
            else if (sheetName.Equals("SecondSheet")) {
                JArray linesElem = sheet.Property("lines").Value as JArray;
                for (int j = 0; j < linesElem.Count; ++j) {
                    SecondSheet val = new SecondSheet();
                    val.Load(linesElem[j] as JObject);
                    SecondSheetList.Add(val);
                }
            }
        }
        for (int i = 0; i < TestList.Count; ++i)
            TestList[i].ResolveReferences(this);
        for (int i = 0; i < SecondSheetList.Count; ++i)
            SecondSheetList[i].ResolveReferences(this);
    }
}

}
